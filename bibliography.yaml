fred-spec:
  type: web
  title: Flexible Return and Event Delivery (FRED) Specification
  date: 2023-05-25
  organization: Intel
  serial-number: 346446-004US
  url: https://www.intel.com/content/www/us/en/content-details/779982/flexible-return-and-event-delivery-fred-specification.html
userfaultfd:
  type: web
  title: Userfaultfd
  url: https://docs.kernel.org/admin-guide/mm/userfaultfd.html
torvalds-page-fault-cost:
  type: web
  author: Linus Torvalds
  url: https://web.archive.org/web/20181208181101/https://plus.google.com/+LinusTorvalds/posts/YDKRFDwHwr6
flexsc:
  type: article
  title: 'FlexSC: flexible system call scheduling with exception-less system calls'
  author:
    - Soares, Livio
    - Stumm, Michael
  date: 2010
  page-range: 33–46
  abstract: 'For the past 30+ years, system calls have been the de facto interface used by applications to request services from the operating system kernel. System calls have almost universally been implemented as a synchronous mechanism, where a special processor instruction is used to yield userspace execution to the kernel. In the first part of this paper, we evaluate the performance impact of traditional synchronous system calls on system intensive workloads. We show that synchronous system calls negatively affect performance in a significant way, primarily because of pipeline flushing and pollution of key processor structures (e.g., TLB, data and instruction caches, etc.).We propose a new mechanism for applications to request services from the operating system kernel: exception-less system calls. They improve processor efficiency by enabling flexibility in the scheduling of operating system work, which in turn can lead to significantly increased temporal and spacial locality of execution in both user and kernel space, thus reducing pollution effects on processor structures. Exception-less system calls are particularly effective on multicore processors. They primarily target highly threaded server applications, such as Web servers and database servers.We present FlexSC, an implementation of exceptionless system calls in the Linux kernel, and an accompanying user-mode thread package (FlexSC-Threads), binary compatible with POSIX threads, that translates legacy synchronous system calls into exception-less ones transparently to applications. We show how FlexSC improves performance of Apache by up to 116%, MySQL by up to 40%, and BIND by up to 105% while requiring no modifications to the applications.'
  parent:
    type: proceedings
    title: Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation
    publisher: USENIX Association
    location: Vancouver, BC, Canada
    parent:
      type: proceedings
      title: OSDI'10
syrup:
  type: article
  title: 'Syrup: User-Defined Scheduling Across the Stack'
  author:
    - Kaffes, Kostis
    - Humphries, Jack Tigar
    - Mazières, David
    - Kozyrakis, Christos
  date: 2021
  page-range: 605–620
  url: https://doi.org/10.1145/3477132.3483548
  serial-number:
    doi: 10.1145/3477132.3483548
    isbn: '9781450387095'
  abstract: Suboptimal scheduling decisions in operating systems, networking stacks, and application runtimes are often responsible for poor application performance, including higher latency and lower throughput. These poor decisions stem from a lack of insight into the applications and requests the scheduler is handling and a lack of coherence and coordination between the various layers of the stack, including NICs, kernels, and applications.We propose Syrup, a framework for user-defined scheduling. Syrup enables untrusted application developers to express application-specific scheduling policies across these system layers without being burdened with the low-level system mechanisms that implement them. Application developers write a scheduling policy with Syrup as a set of matching functions between inputs (threads, network packets, network connections) and executors (cores, network sockets, NIC queues) and then deploy it across system layers without modifying their code. Syrup supports multi-tenancy as multiple co-located applications can each safely and securely specify a custom policy. We present several examples of uses of Syrup to define application and workload-specific scheduling policies in a few lines of code, deploy them across the stack, and improve performance up to 8x compared with default policies.
  parent:
    type: proceedings
    title: Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles
    publisher: Association for Computing Machinery
    location: Virtual Event, Germany
    parent:
      type: proceedings
      title: SOSP '21
ufs:
  type: article
  title: Scale and Performance in a Filesystem Semi-Microkernel
  author:
    - Liu, Jing
    - Rebello, Anthony
    - Dai, Yifan
    - Ye, Chenhao
    - Kannan, Sudarsun
    - Arpaci-Dusseau, Andrea C.
    - Arpaci-Dusseau, Remzi H.
  date: 2021
  page-range: 819–835
  url: https://doi.org/10.1145/3477132.3483581
  serial-number:
    doi: 10.1145/3477132.3483581
    isbn: '9781450387095'
  abstract: 'We present uFS, a user-level filesystem semi-microkernel. uFS takes advantage of a high-performance storage development kit to realize a fully-functional, crash-consistent, highly-scalable filesystem, with relative developer ease. uFS delivers scalable high performance with a number of novel techniques: careful partitioning of in-memory and on-disk data structures to enable concurrent access without locking, inode migration for balancing load across filesystem threads, and a dynamic scaling algorithm for determining the number of filesystem threads to serve the current workload. Through measurements, we show that uFS has good base performance and excellent scalability; for example, uFS delivers nearly twice the throughput of ext4 for LevelDB on YCSB workloads.'
  parent:
    type: proceedings
    title: Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles
    publisher: Association for Computing Machinery
    location: Virtual Event, Germany
    parent:
      type: proceedings
      title: SOSP '21
checkpoint-and-restart:
  type: article
  title: Instant OS updates via userspace checkpoint-and-restart
  author:
    - Kashyap, Sanidhya
    - Min, Changwoo
    - Lee, Byoungyoung
    - Kim, Taesoo
    - Emelyanov, Pavel
  date: 2016
  page-range: 605-619
  serial-number:
    isbn: '9781931971300'
  abstract: In recent years, operating systems have become increasingly complex and thus more prone to security and performance issues. Accordingly, system updates to address these issues have become more frequently available and increasingly important. To complete such updates, users must reboot their systems, resulting in unavoidable downtime and further loss of the states of running applications.We present KUP, a practical OS update mechanism that employs a userspace checkpoint-and-restart mechanism, which uses an optimized data structure for checkpointing on disk as well as a memory persistence mechanism across the update, coupled with a fast in-place kernel switch. This allows for instant kernel updates spanning across major kernel versions without any kernel modifications.Our evaluation shows that KUP can support any type of real kernel patches (e.g., security, minor or even major releases) with large-scale applications that include memcached, mysql, or in the middle of the Linux kernel compilation, unlike well-known dynamic hot-patching techniques (e.g., ksplice). Not only that, KUP can update a running Linux kernel in 3 seconds (overall downtime) without losing 32 GB of memcached data from kernel version v3.17-rc7 to v4.1.
  parent:
    type: proceedings
    title: Proceedings of the 2016 USENIX Conference on Usenix Annual Technical Conference
    publisher:
      name: USENIX Association
      location: Denver, CO, USA
    parent:
      type: proceedings
      title: USENIX ATC '16
live-migration-of-vms:
  type: article
  title: Live migration of virtual machines
  author:
    - Clark, Christopher
    - Fraser, Keir
    - Hand, Steven
    - Hansen, Jacob Gorm
    - Jul, Eric
    - Limpach, Christian
    - Pratt, Ian
    - Warfield, Andrew
  date: 2005
  page-range: 273-286
  abstract: 'Migrating operating system instances across distinct physical hosts is a useful tool for administrators of data centers and clusters: It allows a clean separation between hard-ware and software, and facilitates fault management, load balancing, and low-level system maintenance.By carrying out the majority of migration while OSes continue to run, we achieve impressive performance with minimal service downtimes; we demonstrate the migration of entire OS instances on a commodity cluster, recording service downtimes as low as 60ms. We show that that our performance is sufficient to make live migration a practical tool even for servers running interactive loads.In this paper we consider the design options for migrating OSes running services with liveness constraints, focusing on data center and cluster environments. We introduce and analyze the concept of writable working set, and present the design, implementation and evaluation of high-performance OS migration built on top of the Xen VMM.'
  parent:
    type: proceedings
    title: Proceedings of the 2nd Conference on Symposium on Networked Systems Design & Implementation - Volume 2
    publisher:
      name: USENIX Association
      location: USA
    parent:
      type: proceedings
      title: NSDI'05
fbmm:
  type: article
  title: '{FBMM}: Making Memory Management Extensible With Filesystems'
  author:
    - Tabatabai, Bijan
    - Sorenson, James
    - Swift, Michael M.
  date: 2024-07
  page-range: 785-798
  url: https://www.usenix.org/conference/atc24/presentation/tabatabai
  serial-number:
    isbn: 978-1-939133-41-0
  parent:
    type: proceedings
    title: 2024 USENIX Annual Technical Conference (USENIX ATC 24)
    publisher:
      name: USENIX Association
      location: Santa Clara, CA

kone25:
  type: article
  title: Understanding Intel User Interrupts
  author:
    - Kone, Yves
    - Duval, Louis
    - Lachaize, Renaud
    - Felber, Pascal
    - Hagimont, Daniel
    - Tchana, Alain
  date: 2025-06
  url: https://doi.org/10.1145/3727132
  serial-number:
    doi: 10.1145/3727132
  abstract: User interrupts (UINTR) is a new hardware feature available in recent Intel Xeon processors. It enables a CPU to send, receive, and handle hardware inter-processor interrupts directly in user mode, meaning without the intervention of the OS kernel. In this paper, we shed light on the inner working of this facility and investigate, with detailed performance and overhead measurements considering deployments on physical machines and virtual machines with Linux and KVM, how it can be leveraged for more efficient inter-process communications, as an alternative to OS (Unix) signals. With UINTR, preemptive user-level thread schedulers can achieve quantum lengths in the microsecond scale.
  parent:
    type: periodical
    title: Proc. ACM Meas. Anal. Comput. Syst.
    publisher:
      name: Association for Computing Machinery
      location: New York, NY, USA
    issue: 2
    volume: 9

intel-manual:
  type: book
  title: Intel 64 and IA-32 Architectures Software Developer's Manual
  date: 2024-12-24
  organization: Intel
  volume: 1-4
  serial-number: 253665-086US
  url: https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html

sched_ext:
  type: web
  title: Extensible Scheduler Class
  url: https://docs.kernel.org/scheduler/sched-ext.html

aydogmus25:
  type: article
  title: 'Extended User Interrupts (xUI): Fast and Flexible Notification without Polling'
  author:
    - Aydogmus, Berk
    - Guo, Linsong
    - Zuberi, Danial
    - Garfinkel, Tal
    - Tullsen, Dean
    - Ousterhout, Amy
    - Taram, Kazem
  date: 2025
  page-range: 373-389
  serial-number:
    doi: 10.1145/3676641.3716028
  parent:
    type: proceedings

guo25:
  type: article
  title: The Benefits and Limitations of User Interrupts for Preemptive Userspace Scheduling
  author:
    - Guo, Linsong
    - Zuberi, Danial
    - Garfinkel, Tal
    - Ousterhout, Amy
  date: 2025-04
  page-range: 1015-1032
  url: https://www.usenix.org/conference/nsdi25/presentation/guo
  serial-number:
    isbn: 978-1-939133-46-5
  parent:
    type: proceedings
    title: 22nd USENIX Symposium on Networked Systems Design and Implementation (NSDI 25)
    publisher:
      name: USENIX Association
      location: Philadelphia, PA

gem5:
  type: article
  title: The gem5 simulator
  author:
    - Binkert, Nathan
    - Beckmann, Bradford
    - Black, Gabriel
    - Reinhardt, Steven K.
    - Saidi, Ali
    - Basu, Arkaprava
    - Hestness, Joel
    - Hower, Derek R.
    - Krishna, Tushar
    - Sardashti, Somayeh
    - Sen, Rathijit
    - Sewell, Korey
    - Shoaib, Muhammad
    - Vaish, Nilay
    - Hill, Mark D.
    - Wood, David A.
  date: 2011-08
  page-range: 1-7
  url: https://doi.org/10.1145/2024716.2024718
  serial-number:
    doi: 10.1145/2024716.2024718
    issn: 0163-5964
  abstract: The gem5 simulation infrastructure is the merger of the best aspects of the M5 [4] and GEMS [9] simulators. M5 provides a highly configurable simulation framework, multiple ISAs, and diverse CPU models. GEMS complements these features with a detailed and exible memory system, including support for multiple cache coherence protocols and interconnect models. Currently, gem5 supports most commercial ISAs (ARM, ALPHA, MIPS, Power, SPARC, and x86), including booting Linux on three of them (ARM, ALPHA, and x86).The project is the result of the combined efforts of many academic and industrial institutions, including AMD, ARM, HP, MIPS, Princeton, MIT, and the Universities of Michigan, Texas, and Wisconsin. Over the past ten years, M5 and GEMS have been used in hundreds of publications and have been downloaded tens of thousands of times. The high level of collaboration on the gem5 project, combined with the previous success of the component parts and a liberal BSD-like license, make gem5 a valuable full-system simulation tool.
  parent:
    type: periodical
    title: SIGARCH Comput. Archit. News
    publisher:
      name: Association for Computing Machinery
      location: New York, NY, USA
    issue: 2
    volume: 39

peng25:
  type: article
  title: 'Pegasus: Transparent and Unified Kernel-Bypass Networking for Fast Local and Remote Communication'
  author:
    - Peng, Dinglan
    - Liu, Congyu
    - Palit, Tapti
    - Vahldiek-Oberwagner, Anjo
    - Vij, Mona
    - Fonseca, Pedro
  date: 2025
  page-range: 360-378
  url: https://doi.org/10.1145/3689031.3696083
  serial-number:
    doi: 10.1145/3689031.3696083
    isbn: '9798400711961'
  abstract: Modern software architectures in cloud computing are highly reliant on interconnected local and remote services. Popular architectures, such as the service mesh, rely on the use of independent services or sidecars for a single application. While such modular approaches simplify application development and deployment, they also introduce significant communication overhead since now even local communication that is handled by the kernel becomes a performance bottleneck. This problem has been identified and partially solved for remote communication over fast NICs through the use of kernel-bypass data plane systems. However, existing kernel-bypass mechanisms challenge their practical deployment by either requiring code modification or supporting only a small subset of the network interface.In this paper, we propose Pegasus, a framework for transparent kernel bypass for local and remote communication. By transparently fusing multiple applications into a single process, Pegasus provides an in-process fast path to bypass the kernel for local communication. To accelerate remote communication over fast NICs, Pegasus uses DPDK to directly access the NIC. Pegasus supports transparent kernel bypass for unmodified binaries by implementing core OS services in user space, such as scheduling and memory management, thus removing the kernel from the critical path. Our experiments on a range of real-world applications show that, compared with Linux, Pegasus improves the throughput by 19% to 33% for local communication and 178% to 442% for remote communication, without application changes. Furthermore, Pegasus achieves 222% higher throughput than Linux for co-located, IO-intensive applications that require both local and remote communication, with each communication optimization contributing significantly.
  parent:
    type: proceedings
    title: Proceedings of the Twentieth European Conference on Computer Systems
    publisher:
      name: Association for Computing Machinery
      location: Rotterdam, Netherlands
    parent:
      type: proceedings
      title: EuroSys '25

fried24:
  type: article
  title: Making Kernel Bypass Practical for the Cloud with Junction
  author:
    - Fried, Joshua
    - Chaudhry, Gohar Irfan
    - Saurez, Enrique
    - Choukse, Esha
    - Goiri, Inigo
    - Elnikety, Sameh
    - Fonseca, Rodrigo
    - Belay, Adam
  date: 2024-04
  page-range: 55-73
  url: https://www.usenix.org/conference/nsdi24/presentation/fried
  serial-number:
    isbn: 978-1-939133-39-7
  parent:
    type: proceedings
    title: 21st USENIX Symposium on Networked Systems Design and Implementation (NSDI 24)
    publisher:
      name: USENIX Association
      location: Santa Clara, CA

li24:
  type: article
  title: 'LibPreemptible: Enabling Fast, Adaptive, and Hardware-Assisted User-Space Scheduling'
  author:
    - Li, Yueying
    - Lazarev, Nikita
    - Koufaty, David
    - Yin, Tenny
    - Anderson, Andy
    - Zhang, Zhiru
    - Suh, G. Edward
    - Kaffes, Kostis
    - Delimitrou, Christina
  date: 2024
  page-range: 922-936
  serial-number:
    doi: 10.1109/HPCA57654.2024.00075
  parent:
    type: proceedings
    title: 2024 IEEE International Symposium on High-Performance Computer Architecture (HPCA)
    issue: ''
    volume: 0

rauscher24:
  type: article
  title: 'Cross-Core Interrupt Detection: Exploiting User and Virtualized IPIs'
  author:
    - Rauscher, Fabian
    - Gruss, Daniel
  date: 2024
  page-range: 94-108
  url: https://doi.org/10.1145/3658644.3690242
  serial-number:
    doi: 10.1145/3658644.3690242
    isbn: '9798400706363'
  abstract: 'Interrupts are fundamental for inter-process and cross-core communication in modern systems. Controlling these communication mechanisms historically requires switches into the kernel or hypervisor, incurring high-performance costs. To alleviate these costs, Intel introduced new hardware mechanisms to send inter-processor interrupts (IPIs) from user space without switching into the kernel and from virtual machines without switching into the hypervisor. However, it is unclear whether this direct, unsupervised interaction between unprivileged (or virtualized) workloads and the underlying hardware introduces a significant change in the attack surface.In this paper, we present the IPI side channel, a novel side-channel attack exploiting the recently introduced user interrupts and IPI virtualization features on Intel Sapphire Rapids and the upcoming Intel Arrow Lake processors. The IPI side channel is the first cross-core interrupt detection side channel, allowing an attacker to monitor interrupts delivered to any physical core of the same processor. Our attack is based on precise measurements of the hardware delivery time of interrupts from user space and virtual machines. More specifically, we exploit that interrupts are delivered through a cross-core bus, leading to timing variations on the attacker''s local IPIs. We present multiple case studies to compare the IPI side channel with the state of the art: First, we present an unprivileged cross-core covert channel with a native true capacity of 434.7 kbit/s (n=100, σx=0.03) and a cross-VM capacity of 3.45 kbit/s (n=100, σx=0.01). Second, we demonstrate a native inter-keystroke timing attack with an F1 score of 97.9%. Third, we present an open-world website fingerprinting attack on the top 100 websites, achieving an F1 score of 89.0% in a native scenario and an F1 score of 71.0% in a cross-VM (thin client) scenario. Furthermore, we discuss the broader context of the IPI side channels and categorize interrupt side channels and mitigations.'
  parent:
    type: proceedings
    title: Proceedings of the 2024 on ACM SIGSAC Conference on Computer and Communications Security
    publisher:
      name: Association for Computing Machinery
      location: Salt Lake City, UT, USA
    parent:
      type: proceedings
      title: CCS '24

humphries2021:
  type: article
  title: 'ghOSt: Fast and Flexible User-Space Delegation of Linux Scheduling'
  author:
    - Humphries, Jack Tigar
    - Natu, Neel
    - Chaugule, Ashwin
    - Weisse, Ofir
    - Rhoden, Barret
    - Don, Josh
    - Rizzo, Luigi
    - Rombakh, Oleg
    - Turner, Paul Jack
    - Kozyrakis, Christos
  date: 2021
  page-range: 588–604
  url: https://doi.org/10.1145/3477132.3483542
  parent:
    type: proceedings
    title: Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles CD-ROM
    location: New York, NY, USA

miller21:
  type: article
  title: High Velocity Kernel File Systems with Bento
  author:
    - Miller, Samantha
    - Zhang, Kaiyuan
    - Chen, Mengqi
    - Jennings, Ryan
    - Chen, Ang
    - Zhuo, Danyang
    - Anderson, Thomas
  date: 2021-02
  page-range: 65–79
  url: https://www.usenix.org/conference/fast21/presentation/miller
  serial-number:
    isbn: 978-1-939133-20-5
  parent:
    type: proceedings
    title: 19th USENIX Conference on File and Storage Technologies (FAST 21)
    publisher: USENIX Association

marty19:
  type: article
  title: 'Snap: a microkernel approach to host networking'
  author:
    - Marty, Michael
    - name: Kruijf
      given-name: Marc
      prefix: de
    - Adriaens, Jacob
    - Alfeld, Christopher
    - Bauer, Sean
    - Contavalli, Carlo
    - Dalton, Michael
    - Dukkipati, Nandita
    - Evans, William C.
    - Gribble, Steve
    - Kidd, Nicholas
    - Kononov, Roman
    - Kumar, Gautam
    - Mauer, Carl
    - Musick, Emily
    - Olson, Lena
    - Rubow, Erik
    - Ryan, Michael
    - Springborn, Kevin
    - Turner, Paul
    - Valancius, Valas
    - Wang, Xi
    - Vahdat, Amin
  date: 2019
  page-range: 399–413
  url: https://doi.org/10.1145/3341301.3359657
  serial-number:
    doi: 10.1145/3341301.3359657
    isbn: '9781450368735'
  abstract: This paper presents our design and experience with a microkernel-inspired approach to host networking called Snap. Snap is a userspace networking system that supports Google's rapidly evolving needs with flexible modules that implement a range of network functions, including edge packet switching, virtualization for our cloud platform, traffic shaping policy enforcement, and a high-performance reliable messaging and RDMA-like service. Snap has been running in production for over three years, supporting the extensible communication needs of several large and critical systems.Snap enables fast development and deployment of new networking features, leveraging the benefits of address space isolation and the productivity of userspace software development together with support for transparently upgrading networking services without migrating applications off of a machine. At the same time, Snap achieves compelling performance through a modular architecture that promotes principled synchronization with minimal state sharing, and supports real-time scheduling with dynamic scaling of CPU resources through a novel kernel/userspace CPU scheduler co-design. Our evaluation demonstrates over 3x Gbps/core improvement compared to a kernel networking stack for RPC workloads, software-based RDMA-like performance of up to 5M IOPS/core, and transparent upgrades that are largely imperceptible to user applications. Snap is deployed to over half of our fleet of machines and supports the needs of numerous teams.
  parent:
    type: proceedings
    title: Proceedings of the 27th ACM Symposium on Operating Systems Principles
    publisher: Association for Computing Machinery
    location: Huntsville, Ontario, Canada
    parent:
      type: proceedings
      title: SOSP '19

jalalian24:
  type: article
  title: '{ExtMem}: Enabling {Application-Aware} Virtual Memory Management for {Data-Intensive} Applications'
  author:
    - Jalalian, Sepehr
    - Patel, Shaurya
    - Hajidehi, Milad Rezaei
    - Seltzer, Margo
    - Fedorova, Alexandra
  date: 2024-07
  page-range: 397–408
  url: https://www.usenix.org/conference/atc24/presentation/jalalian
  serial-number:
    isbn: 978-1-939133-41-0
  parent:
    type: proceedings
    title: 2024 USENIX Annual Technical Conference (USENIX ATC 24)
    publisher: USENIX Association
    location: Santa Clara, CA
