From 4c5d542fe4f622be4d2bccdfcba81ff1764b7748 Mon Sep 17 00:00:00 2001
From: beviu <contact@beviu.com>
Date: Wed, 28 May 2025 13:54:15 +0200
Subject: [PATCH 4/4] x86/uintr: Add UINTR_HANDLER_FLAG_SET_UPID_NV

This patch is used to test if user interrupts can be used to send IRQs
by setting the NV field in the UPID to the IRQ vector number.

This is just for debugging, do not use on a production kernel!
---
 arch/x86/include/asm/uintr.h      |  1 +
 arch/x86/include/uapi/asm/uintr.h |  3 +++
 arch/x86/kernel/uintr.c           | 17 ++++++++++++-----
 3 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/arch/x86/include/asm/uintr.h b/arch/x86/include/asm/uintr.h
index a999e938525b..20b178f60740 100644
--- a/arch/x86/include/asm/uintr.h
+++ b/arch/x86/include/asm/uintr.h
@@ -34,6 +34,7 @@ struct uintr_upid_ctx {
 	bool waiting;			/* Flag for UPID blocked in the kernel */
 	bool no_self_ipi;
 	u8 uinv;
+	u8 upid_nv;			/* Value in upid->nc.nv when not in blocking mode */
 	unsigned int waiting_cost;	/* Flags for who pays the waiting cost */
 };
 
diff --git a/arch/x86/include/uapi/asm/uintr.h b/arch/x86/include/uapi/asm/uintr.h
index af2ee7e1fcec..8072e025890f 100644
--- a/arch/x86/include/uapi/asm/uintr.h
+++ b/arch/x86/include/uapi/asm/uintr.h
@@ -25,6 +25,9 @@
 #define UINTR_HANDLER_FLAG_SET_UINV		0x1
 #define UINTR_HANDLER_FLAG_UINV_SHIFT		24
 #define UINTR_HANDLER_FLAG_UINV_MASK		0xff000000
+#define UINTR_HANDLER_FLAG_SET_UPID_NV		0x2
+#define UINTR_HANDLER_FLAG_UPID_NV_SHIFT	16
+#define UINTR_HANDLER_FLAG_UPID_NV_MASK		0x00ff0000
 #define UINTR_HANDLER_FLAG_SET_UPIR		0x4
 #define UINTR_HANDLER_FLAG_NO_SELF_IPI		0x8
 
diff --git a/arch/x86/kernel/uintr.c b/arch/x86/kernel/uintr.c
index dee4b9830139..7ac4b154d2bc 100644
--- a/arch/x86/kernel/uintr.c
+++ b/arch/x86/kernel/uintr.c
@@ -931,7 +931,7 @@ static inline u32 cpu_to_ndst(int cpu)
 	return apicid;
 }
 
-static int do_uintr_register_handler(u64 handler, unsigned int flags, u8 uinv)
+static int do_uintr_register_handler(u64 handler, unsigned int flags, u8 uinv, u8 upid_nv)
 {
 	struct uintr_upid_ctx *upid_ctx;
 	struct uintr_upid *upid;
@@ -961,6 +961,7 @@ static int do_uintr_register_handler(u64 handler, unsigned int flags, u8 uinv)
 	}
 
 	upid_ctx->uinv = uinv;
+	upid_ctx->upid_nv = upid_nv;
 
 	/*
 	 * UPID and upid_activated will be referenced during context switch. Need to
@@ -976,7 +977,7 @@ static int do_uintr_register_handler(u64 handler, unsigned int flags, u8 uinv)
 
 	/* Check if a locked access is needed for NV and NDST bits of the UPID */
 	upid = upid_ctx->upid;
-	upid->nc.nv = UINTR_NOTIFICATION_VECTOR;
+	upid->nc.nv = upid_ctx->upid_nv;
 	upid->nc.ndst = cpu_to_ndst(cpu);
 
 	if (flags & UINTR_HANDLER_FLAG_SET_UPIR) {
@@ -1022,6 +1023,7 @@ SYSCALL_DEFINE2(uintr_register_handler, u64 __user *, handler, unsigned int, fla
 {
 	int ret;
 	u8 uinv = UINTR_NOTIFICATION_VECTOR;
+	u8 upid_nv = UINTR_NOTIFICATION_VECTOR;
 
 	if (!cpu_feature_enabled(X86_FEATURE_UINTR))
 		return -ENOSYS;
@@ -1034,6 +1036,11 @@ SYSCALL_DEFINE2(uintr_register_handler, u64 __user *, handler, unsigned int, fla
 		flags &= ~(UINTR_HANDLER_FLAG_SET_UINV | UINTR_HANDLER_FLAG_UINV_MASK);
 	}
 
+	if (flags & UINTR_HANDLER_FLAG_SET_UPID_NV) {
+		upid_nv = (flags & UINTR_HANDLER_FLAG_UPID_NV_MASK) >> UINTR_HANDLER_FLAG_UPID_NV_SHIFT;
+		flags &= ~(UINTR_HANDLER_FLAG_SET_UPID_NV | UINTR_HANDLER_FLAG_UPID_NV_MASK);
+	}
+
 	if (flags & ~(UINTR_HANDLER_FLAG_WAITING_ANY | UINTR_HANDLER_FLAG_SET_UPIR | UINTR_HANDLER_FLAG_NO_SELF_IPI))
 		return -EINVAL;
 
@@ -1044,7 +1051,7 @@ SYSCALL_DEFINE2(uintr_register_handler, u64 __user *, handler, unsigned int, fla
 	if (!handler)
 		return -EFAULT;
 
-	ret = do_uintr_register_handler((u64)handler, flags, uinv);
+	ret = do_uintr_register_handler((u64)handler, flags, uinv, upid_nv);
 
 	pr_debug("recv: register handler task=%d flags %d handler %lx ret %d\n",
 		 current->pid, flags, (unsigned long)handler, ret);
@@ -1449,7 +1456,7 @@ static void uintr_remove_task_wait(struct task_struct *task)
 		if (upid_ctx->task == task) {
 			//pr_debug("wait: Removing task %d from wait\n",
 			//	 upid_ctx->task->pid);
-			upid_ctx->upid->nc.nv = UINTR_NOTIFICATION_VECTOR;
+			upid_ctx->upid->nc.nv = upid_ctx->upid_nv;
 			upid_ctx->waiting = false;
 			list_del(&upid_ctx->node);
 		}
@@ -1563,7 +1570,7 @@ void uintr_wake_up_process(void)
 					     upid_ctx->task->pid);
 			set_bit(UINTR_UPID_STATUS_SN, (unsigned long *)&upid_ctx->upid->nc.status);
 			/* Check if a locked access is needed for NV and NDST bits of the UPID */
-			upid_ctx->upid->nc.nv = UINTR_NOTIFICATION_VECTOR;
+			upid_ctx->upid->nc.nv = upid_ctx->upid_nv;
 			upid_ctx->waiting = false;
 			set_tsk_thread_flag(upid_ctx->task, TIF_NOTIFY_SIGNAL);
 			wake_up_process(upid_ctx->task);
-- 
2.49.0

