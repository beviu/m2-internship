From 97ff045b0cae6ffc6dac3714bbba10bd80fc2224 Mon Sep 17 00:00:00 2001
From: beviu <contact@beviu.com>
Date: Fri, 2 May 2025 10:20:26 +0200
Subject: [PATCH 5/5] mm: swap: add SWAP_FLAG_SYNCHRONOUS_WRITE

madvise(MADV_PAGEOUT) can be used to tell the kernel to swap out pages,
but there is no easy way to wait for them to actually be removed from
the swap cache.

It does call swap_writepage directly which submits the write
operation but does so asynchronously, unless the swap file has the
SWP_SYNCHRONOUS_IO flag, and that flag is currently only set when the
underlying block device is marked as synchronous (bdev_synchronous).

Add a SWAP_FLAG_SYNCHRONOUS_WRITE flag to swapon that forces the swap
file to use synchronous writes with SWP_SYNCHRONOUS_WRITE.

SWP_SYNCHRONOUS_WRITE is a new swap info flag that makes writes to the
swap synchronous like SWP_SYNCHRONOUS_IO. The latter could not be used
because it also changes the way pages are read.

This is still not enough for userspace to be able to wait for the
pages to be removed from the swap cache, as the write callback
(__end_swap_bio_write) only ends writeback against the folio, so it will
still not be freed until the next reclaim, but this will be dealt in
another commit.
---
 include/linux/swap.h | 42 ++++++++++++++++++++++--------------------
 mm/page_io.c         |  2 +-
 mm/swapfile.c        |  3 +++
 3 files changed, 26 insertions(+), 21 deletions(-)

diff --git a/include/linux/swap.h b/include/linux/swap.h
index bc0e1c275fc0..d9cfc0047ce5 100644
--- a/include/linux/swap.h
+++ b/include/linux/swap.h
@@ -22,15 +22,16 @@ struct bio;
 
 struct pagevec;
 
-#define SWAP_FLAG_PREFER	0x8000	/* set if swap priority specified */
-#define SWAP_FLAG_PRIO_MASK	0x7fff
-#define SWAP_FLAG_DISCARD	0x10000 /* enable discard for swap */
-#define SWAP_FLAG_DISCARD_ONCE	0x20000 /* discard swap area at swapon-time */
-#define SWAP_FLAG_DISCARD_PAGES 0x40000 /* discard page-clusters after use */
+#define SWAP_FLAG_PREFER		0x8000	/* set if swap priority specified */
+#define SWAP_FLAG_PRIO_MASK		0x7fff
+#define SWAP_FLAG_DISCARD		0x10000 /* enable discard for swap */
+#define SWAP_FLAG_DISCARD_ONCE		0x20000 /* discard swap area at swapon-time */
+#define SWAP_FLAG_DISCARD_PAGES		0x40000 /* discard page-clusters after use */
+#define SWAP_FLAG_SYNCHRONOUS_WRITE	0x80000 /* use synchronous writes */
 
 #define SWAP_FLAGS_VALID	(SWAP_FLAG_PRIO_MASK | SWAP_FLAG_PREFER | \
 				 SWAP_FLAG_DISCARD | SWAP_FLAG_DISCARD_ONCE | \
-				 SWAP_FLAG_DISCARD_PAGES)
+				 SWAP_FLAG_DISCARD_PAGES | SWAP_FLAG_SYNCHRONOUS_WRITE)
 #define SWAP_BATCH 64
 
 static inline int current_is_kswapd(void)
@@ -203,20 +204,21 @@ struct swap_extent {
 	  offsetof(union swap_header, info.badpages)) / sizeof(int))
 
 enum {
-	SWP_USED	= (1 << 0),	/* is slot in swap_info[] used? */
-	SWP_WRITEOK	= (1 << 1),	/* ok to write to this swap?	*/
-	SWP_DISCARDABLE = (1 << 2),	/* blkdev support discard */
-	SWP_DISCARDING	= (1 << 3),	/* now discarding a free cluster */
-	SWP_SOLIDSTATE	= (1 << 4),	/* blkdev seeks are cheap */
-	SWP_CONTINUED	= (1 << 5),	/* swap_map has count continuation */
-	SWP_BLKDEV	= (1 << 6),	/* its a block device */
-	SWP_ACTIVATED	= (1 << 7),	/* set after swap_activate success */
-	SWP_FS_OPS	= (1 << 8),	/* swapfile operations go through fs */
-	SWP_AREA_DISCARD = (1 << 9),	/* single-time swap area discards */
-	SWP_PAGE_DISCARD = (1 << 10),	/* freed swap page-cluster discards */
-	SWP_STABLE_WRITES = (1 << 11),	/* no overwrite PG_writeback pages */
-	SWP_SYNCHRONOUS_IO = (1 << 12),	/* synchronous IO is efficient */
-					/* add others here before... */
+	SWP_USED	= (1 << 0),		/* is slot in swap_info[] used? */
+	SWP_WRITEOK	= (1 << 1),		/* ok to write to this swap?	*/
+	SWP_DISCARDABLE = (1 << 2),		/* blkdev support discard */
+	SWP_DISCARDING	= (1 << 3),		/* now discarding a free cluster */
+	SWP_SOLIDSTATE	= (1 << 4),		/* blkdev seeks are cheap */
+	SWP_CONTINUED	= (1 << 5),		/* swap_map has count continuation */
+	SWP_BLKDEV	= (1 << 6),		/* its a block device */
+	SWP_ACTIVATED	= (1 << 7),		/* set after swap_activate success */
+	SWP_FS_OPS	= (1 << 8),		/* swapfile operations go through fs */
+	SWP_AREA_DISCARD = (1 << 9),		/* single-time swap area discards */
+	SWP_PAGE_DISCARD = (1 << 10),		/* freed swap page-cluster discards */
+	SWP_STABLE_WRITES = (1 << 11),		/* no overwrite PG_writeback pages */
+	SWP_SYNCHRONOUS_IO = (1 << 12),		/* synchronous IO is efficient */
+	SWP_SYNCHRONOUS_WRITE = (1 << 13),	/* use synchronous IO in writepage */
+						/* add others here before... */
 };
 
 #define SWAP_CLUSTER_MAX 32UL
diff --git a/mm/page_io.c b/mm/page_io.c
index f7716b6569fa..f3943c8b9c4c 100644
--- a/mm/page_io.c
+++ b/mm/page_io.c
@@ -466,7 +466,7 @@ void __swap_writepage(struct folio *folio, struct writeback_control *wbc)
 	 * but that will never affect SWP_SYNCHRONOUS_IO, so the data_race
 	 * is safe.
 	 */
-	else if (data_race(sis->flags & SWP_SYNCHRONOUS_IO))
+	else if (data_race(sis->flags & (SWP_SYNCHRONOUS_IO | SWP_SYNCHRONOUS_WRITE)))
 		swap_writepage_bdev_sync(folio, wbc, sis);
 	else
 		swap_writepage_bdev_async(folio, wbc, sis);
diff --git a/mm/swapfile.c b/mm/swapfile.c
index 68ce283e84be..cb9dd1504bc5 100644
--- a/mm/swapfile.c
+++ b/mm/swapfile.c
@@ -3398,6 +3398,9 @@ SYSCALL_DEFINE2(swapon, const char __user *, specialfile, int, swap_flags)
 	if (si->bdev && bdev_synchronous(si->bdev))
 		si->flags |= SWP_SYNCHRONOUS_IO;
 
+	if (swap_flags & SWAP_FLAG_SYNCHRONOUS_WRITE)
+		si->flags |= SWP_SYNCHRONOUS_WRITE;
+
 	if (si->bdev && bdev_nonrot(si->bdev)) {
 		si->flags |= SWP_SOLIDSTATE;
 	} else {
-- 
2.49.0

