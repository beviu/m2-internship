From c576dbce4dbb31e4c80f137ecf4fe82f41f6ad1e Mon Sep 17 00:00:00 2001
From: beviu <contact@beviu.com>
Date: Mon, 12 May 2025 19:19:29 +0200
Subject: [PATCH 27/30] mm: add fast_tracepoints to PF C entry and exit

---
 arch/x86/mm/fault.c  | 9 +++++++++
 include/trace/fast.h | 4 +++-
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index fa71a5d12e87..8e7107d37a87 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -37,6 +37,8 @@
 #define CREATE_TRACE_POINTS
 #include <asm/trace/exceptions.h>
 
+#include <trace/fast.h>
+
 /*
  * Returns 0 if mmiotrace is disabled, or if the fault is not
  * handled by mmiotrace:
@@ -1501,6 +1503,10 @@ DEFINE_IDTENTRY_RAW_ERRORCODE(exc_page_fault)
 {
 	unsigned long address = read_cr2();
 	irqentry_state_t state;
+	bool trace = IS_ENABLED(CONFIG_TRACE_PF) && likely((regs->bx & 0xffffffff) == 0xb141a52a);
+
+	if (trace)
+		fast_tracepoint(c_entry);
 
 	prefetchw(&current->mm->mmap_lock);
 
@@ -1545,4 +1551,7 @@ DEFINE_IDTENTRY_RAW_ERRORCODE(exc_page_fault)
 	instrumentation_end();
 
 	irqentry_exit(regs, state);
+
+	if (trace)
+		fast_tracepoint(c_exit);
 }
diff --git a/include/trace/fast.h b/include/trace/fast.h
index 20866a45bbf0..77730c143325 100644
--- a/include/trace/fast.h
+++ b/include/trace/fast.h
@@ -9,7 +9,9 @@
 
 #include <asm/msr.h>
 
-#define ENUMERATE_FAST_TRACEPOINTS(x)
+#define ENUMERATE_FAST_TRACEPOINTS(x) \
+	x(c_entry)		      \
+	x(c_exit)
 
 #define DECLARE_FAST_TRACEPOINT(name) extern u64 fast_tracepoint_##name;
 ENUMERATE_FAST_TRACEPOINTS(DECLARE_FAST_TRACEPOINT)
-- 
2.49.0

