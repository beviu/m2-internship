From dd4fbcefd23c1dffbcaf2dc6d29eceda8f93e020 Mon Sep 17 00:00:00 2001
From: BIJAN TABATABAI <btabatabai@wisc.edu>
Date: Mon, 30 Oct 2023 10:08:17 -0500
Subject: [PATCH 118/179] Try something to fix badger trap

---
 ContigMMFS/contig.c |  5 +++++
 mm/badger_trap.c    |  1 +
 mm/memory.c         | 37 ++++++++++++++-----------------------
 3 files changed, 20 insertions(+), 23 deletions(-)

diff --git a/ContigMMFS/contig.c b/ContigMMFS/contig.c
index fbd4d2e72046..92edf655b19c 100644
--- a/ContigMMFS/contig.c
+++ b/ContigMMFS/contig.c
@@ -10,6 +10,7 @@
 #include <linux/rmap.h>
 #include <linux/string.h>
 #include <linux/falloc.h>
+#include <linux/badger_trap.h>
 
 #include "contig.h"
 
@@ -66,6 +67,10 @@ static vm_fault_t contigmmfs_fault(struct vm_fault *vmf)
         entry = pte_mkwrite(pte_mkdirty(entry));
     }
 
+	if(vma->vm_mm && (vma->vm_mm->badger_trap_en==1) && (!(vmf->flags & FAULT_FLAG_INSTRUCTION))) {
+        entry = pte_mkreserve(entry);
+    }
+
     page_add_file_rmap(page, vma, false);
     percpu_counter_inc(&vma->vm_mm->rss_stat[MM_FILEPAGES]);
     set_pte_at(vma->vm_mm, vmf->address, vmf->pte, entry);
diff --git a/mm/badger_trap.c b/mm/badger_trap.c
index 44dba0209e4a..1f8676517704 100644
--- a/mm/badger_trap.c
+++ b/mm/badger_trap.c
@@ -99,6 +99,7 @@ inline pte_t pte_mkreserve(pte_t pte)
 {
         return pte_set_flags(pte, PTE_RESERVED_MASK);
 }
+EXPORT_SYMBOL(pte_mkreserve);
 
 inline pte_t pte_unreserve(pte_t pte)
 {
diff --git a/mm/memory.c b/mm/memory.c
index 7633f86f396f..17b5e8e6454b 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -4155,7 +4155,7 @@ static vm_fault_t do_anonymous_page(struct vm_fault *vmf)
 	lru_cache_add_inactive_or_unevictable(page, vma);
 setpte:
 	/* Make the page table entry as reserved for TLB miss tracking */
-	if(vma->vm_mm && (vma->vm_mm->badger_trap_en==1) && (!(vmf->flags & FAULT_FLAG_INSTRUCTION)) && !pte_none(entry))
+	if(vma->vm_mm && (vma->vm_mm->badger_trap_en==1) && (!(vmf->flags & FAULT_FLAG_INSTRUCTION)))
 	{
 		entry = pte_mkreserve(entry);
 	}
@@ -4184,7 +4184,6 @@ static vm_fault_t __do_fault(struct vm_fault *vmf)
 {
 	struct vm_area_struct *vma = vmf->vma;
 	vm_fault_t ret;
-	pte_t entry, *ptep;
 
 	/*
 	 * Preallocate pte before we take page_lock because this might lead to
@@ -4208,9 +4207,7 @@ static vm_fault_t __do_fault(struct vm_fault *vmf)
 	}
 
 	ret = vma->vm_ops->fault(vmf);
-	if (unlikely(ret & VM_FAULT_NOPAGE))
-		goto badger_trap;
-	else if (unlikely(ret & (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY |
+    if (unlikely(ret & (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY |
 			    VM_FAULT_DONE_COW)))
 		return ret;
 
@@ -4231,24 +4228,10 @@ static vm_fault_t __do_fault(struct vm_fault *vmf)
 		return poisonret;
 	}
 
-badger_trap:
-	/* Make the page table entry as reserved for TLB miss tracking */
-	if(vma->vm_mm && (vma->vm_mm->badger_trap_en==1) && (!(vmf->flags & FAULT_FLAG_INSTRUCTION))) {
-		ptep = pte_offset_map_lock(vma->vm_mm, vmf->pmd, vmf->address, &vmf->ptl);
-		entry = *ptep;
-		if (!pte_none(entry)) {
-			entry = pte_mkreserve(entry);
-			set_pte_at(vma->vm_mm, vmf->address, ptep, entry);
-		}
-    	pte_unmap_unlock(ptep, vmf->ptl);
-	}
-
-	if (!(ret & VM_FAULT_NOPAGE)) {
-		if (unlikely(!(ret & VM_FAULT_LOCKED)))
-			lock_page(vmf->page);
-		else
-			VM_BUG_ON_PAGE(!PageLocked(vmf->page), vmf->page);
-	}
+	if (unlikely(!(ret & VM_FAULT_LOCKED)))
+		lock_page(vmf->page);
+	else
+		VM_BUG_ON_PAGE(!PageLocked(vmf->page), vmf->page);
 
 	return ret;
 }
@@ -4400,6 +4383,7 @@ vm_fault_t finish_fault(struct vm_fault *vmf)
 	struct vm_area_struct *vma = vmf->vma;
 	struct page *page;
 	vm_fault_t ret;
+	pte_t entry;
 
 	/* Did we COW the page? */
 	if ((vmf->flags & FAULT_FLAG_WRITE) && !(vma->vm_flags & VM_SHARED))
@@ -4453,6 +4437,13 @@ vm_fault_t finish_fault(struct vm_fault *vmf)
 		ret = VM_FAULT_NOPAGE;
 	}
 
+	/* Make the page table entry as reserved for TLB miss tracking */
+	if(vma->vm_mm && (vma->vm_mm->badger_trap_en==1) && (!(vmf->flags & FAULT_FLAG_INSTRUCTION))) {
+		entry = *vmf->pte;
+		entry = pte_mkreserve(entry);
+		set_pte_at(vma->vm_mm, vmf->address, vmf->pte, entry);
+	}
+
 	pte_unmap_unlock(vmf->pte, vmf->ptl);
 	return ret;
 }
-- 
2.49.0

