From 573a3ef4d1e0ec108397ba3c9b9e69112fdc1eca Mon Sep 17 00:00:00 2001
From: Bijan Tabatabai <bijan311@gmail.com>
Date: Tue, 8 Nov 2022 10:08:39 -0600
Subject: [PATCH 082/179] Use flush_tlb_range instead of __flush_tlb_all

Hopefully this will give a finer grained tlb flushing
---
 FOMTierFS/fs.c                  | 4 ++--
 arch/x86/include/asm/tlbflush.h | 3 ---
 arch/x86/mm/tlb.c               | 1 +
 3 files changed, 3 insertions(+), 5 deletions(-)

diff --git a/FOMTierFS/fs.c b/FOMTierFS/fs.c
index 81708fedaa15..40d06bc06441 100644
--- a/FOMTierFS/fs.c
+++ b/FOMTierFS/fs.c
@@ -257,7 +257,7 @@ static void migrate_page(struct fomtierfs_sb_info *sbi, struct fomtierfs_inode_i
             set_pte_at(vma->vm_mm, virt_addr, ptep, pte);
         }
     }
-    __flush_tlb_all();
+    flush_tlb_range(vma, virt_addr, virt_addr + sbi->page_size);
 
     // Copy the page
     to_addr = to_dev->virt_addr + (to_page->page_num << sbi->page_shift);
@@ -300,7 +300,7 @@ static void migrate_page(struct fomtierfs_sb_info *sbi, struct fomtierfs_inode_i
             set_pte_at(vma->vm_mm, virt_addr + (i << PAGE_SHIFT), ptep, pte);
         }
     }
-    __flush_tlb_all();
+    flush_tlb_range(vma, virt_addr, virt_addr + sbi->page_size);
 }
 
 static bool fomtierfs_page_accessed(struct fomtierfs_page *page, u64 virt_addr, pmd_t *pmdp)
diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h
index cda3118f3b27..95139b0b18af 100644
--- a/arch/x86/include/asm/tlbflush.h
+++ b/arch/x86/include/asm/tlbflush.h
@@ -53,7 +53,6 @@ static inline void cr4_clear_bits(unsigned long mask)
 	local_irq_restore(flags);
 }
 
-#ifndef MODULE
 /*
  * 6 because 6 should be plenty and struct tlb_state will fit in two cache
  * lines.
@@ -357,8 +356,6 @@ static inline bool huge_pmd_needs_flush(pmd_t oldpmd, pmd_t newpmd)
 }
 #define huge_pmd_needs_flush huge_pmd_needs_flush
 
-#endif /* !MODULE */
-
 static inline void __native_tlb_flush_global(unsigned long cr4)
 {
 	native_write_cr4(cr4 ^ X86_CR4_PGE);
diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c
index c1e31e9a85d7..345fa950f817 100644
--- a/arch/x86/mm/tlb.c
+++ b/arch/x86/mm/tlb.c
@@ -917,6 +917,7 @@ STATIC_NOPV void native_flush_tlb_multi(const struct cpumask *cpumask,
 		on_each_cpu_cond_mask(tlb_is_not_lazy, flush_tlb_func,
 				(void *)info, 1, cpumask);
 }
+EXPORT_SYMBOL(flush_tlb_mm_range);
 
 void flush_tlb_multi(const struct cpumask *cpumask,
 		      const struct flush_tlb_info *info)
-- 
2.49.0

