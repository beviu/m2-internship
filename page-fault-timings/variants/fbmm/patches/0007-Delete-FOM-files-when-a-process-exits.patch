From 8f6f65e4860608e6e9a6f628203c5a4a80134033 Mon Sep 17 00:00:00 2001
From: Bijan Tabatabai <bijan311@gmail.com>
Date: Mon, 4 Oct 2021 16:01:27 -0500
Subject: [PATCH 007/179] Delete FOM files when a process exits

---
 include/linux/file_only_mem.h |   9 +-
 kernel/exit.c                 |   6 +
 mm/file_only_mem.c            | 244 +++++++++++++++++++++++++++++++---
 mm/mmap.c                     |  29 ++--
 4 files changed, 254 insertions(+), 34 deletions(-)

diff --git a/include/linux/file_only_mem.h b/include/linux/file_only_mem.h
index d302282735d9..1f7f94508895 100644
--- a/include/linux/file_only_mem.h
+++ b/include/linux/file_only_mem.h
@@ -8,7 +8,9 @@
 
 bool use_file_only_mem(pid_t pid);
 
-struct file *create_new_fom_file(unsigned long len, unsigned long prot);
+struct file *create_new_fom_file(unsigned long start, unsigned long len,
+	unsigned long prot, pid_t pid);
+void fom_check_exiting_proc(pid_t pid);
 
 #else //CONFIG_FILE_ONLY_MEM
 
@@ -16,10 +18,13 @@ inline bool use_file_only_mem(pid_t pid) {
 	return false;
 }
 
-inline struct file *create_new_fom_file(unsigned long len, unsigned long prot) {
+inline struct file *create_new_fom_file(unsigned long start, unsigned long len,
+	unsigned long prot, pid_t pid) {
 	return NULL;
 }
 
+inline void fom_check_exiting_proc(pid_t pid) {}
+
 #endif //CONFIG_FILE_ONLY_MEM
 
 #endif //__FILE_ONLY_MEM_H
diff --git a/kernel/exit.c b/kernel/exit.c
index f2afdb0add7c..2a5b6999a045 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -68,6 +68,7 @@
 #include <linux/kprobes.h>
 #include <linux/rethook.h>
 #include <linux/sysfs.h>
+#include <linux/file_only_mem.h>
 
 #include <linux/uaccess.h>
 #include <asm/unistd.h>
@@ -813,6 +814,11 @@ void __noreturn do_exit(long code)
 
 	WARN_ON(tsk->plug);
 
+	// Bijan: When a process exits, check if we should delete its FOM files
+	// We only care if the main thread exits, so check against tsk->pid
+	// instead of tsk->tgid
+	fom_check_exiting_proc(tsk->pid);
+
 	kcov_task_exit(tsk);
 	kmsan_task_exit(tsk);
 
diff --git a/mm/file_only_mem.c b/mm/file_only_mem.c
index e4180e39061e..e9c56ac49618 100644
--- a/mm/file_only_mem.c
+++ b/mm/file_only_mem.c
@@ -6,6 +6,7 @@
 #include <linux/fs.h>
 #include <linux/mman.h>
 #include <linux/security.h>
+#include <linux/vmalloc.h>
 
 enum file_only_mem_state {
 	FOM_OFF = 0,
@@ -13,23 +14,102 @@ enum file_only_mem_state {
 	FOM_ALL = 2
 };
 
+// Start is inclusive, end is exclusive
+struct fom_mapping {
+	u64 start;
+	u64 end;
+	struct file *file;
+
+	struct rb_node node;
+};
+
+struct fom_proc {
+	pid_t pid;
+	struct rb_root mappings;
+
+	struct rb_node node;
+};
+
+
 static enum file_only_mem_state fom_state = FOM_OFF;
-static pid_t fom_proc = 0;
+static pid_t cur_proc = 0;
 static char file_dir[PATH_MAX];
+static struct rb_root fom_procs = RB_ROOT;
+static DECLARE_RWSEM(fom_procs_sem);
 
-bool use_file_only_mem(pid_t pid) {
-	if (fom_state == FOM_OFF) {
-		return false;
-	} if (fom_state == FOM_SINGLE_PROC) {
-		return pid == fom_proc;
-	} else if (fom_state == FOM_ALL) {
-		return true;
+///////////////////////////////////////////////////////////////////////////////
+// struct fom_proc functions
+
+static struct fom_proc *get_fom_proc(pid_t pid) {
+	struct rb_node *node = fom_procs.rb_node;
+
+	while (node) {
+		struct fom_proc *proc = rb_entry(node, struct fom_proc, node);
+
+		if (pid < proc->pid)
+			node = node->rb_left;
+		else if (pid > proc->pid)
+			node = node->rb_right;
+		else
+			return proc;
 	}
 
-	// Should never reach here
-	return false;
+	return NULL;
 }
 
+static void insert_new_proc(struct fom_proc *new_proc) {
+	struct rb_node **new = &(fom_procs.rb_node);
+	struct rb_node *parent = NULL;
+
+	while (*new) {
+		struct fom_proc *cur = rb_entry(*new, struct fom_proc, node);
+
+		parent = *new;
+		if (new_proc->pid < cur->pid)
+			new = &((*new)->rb_left);
+		else if (new_proc->pid > cur->pid)
+			new = &((*new)->rb_right);
+		else {
+			pr_err("insert_new_proc: Attempting to insert already existing proc\n");
+			BUG();
+		}
+	}
+
+	rb_link_node(&new_proc->node, parent, new);
+	rb_insert_color(&new_proc->node, &fom_procs);
+}
+
+///////////////////////////////////////////////////////////////////////////////
+// struct fom_mapping functions
+
+static void insert_new_mapping(struct fom_proc *proc, struct fom_mapping *new_map) {
+	struct rb_node **new = &(proc->mappings.rb_node);
+	struct rb_node *parent = NULL;
+
+	while (*new) {
+		struct fom_mapping *cur = rb_entry(*new, struct fom_mapping, node);
+
+		// Check for an overlap
+		if ((new_map->start >= cur->start && new_map->start < cur->end) ||
+			(new_map->end > cur->start && new_map->end <= cur->end)) {
+			pr_err("insert_new_mapping: Attempting to insert overlapping mapping\n");
+			BUG();
+		}
+
+		parent = *new;
+		if (new_map->start < cur->start)
+			new = &((*new)->rb_left);
+		else
+			new = &((*new)->rb_right);
+	}
+
+	rb_link_node(&new_map->node, parent, new);
+	rb_insert_color(&new_map->node, &proc->mappings);
+}
+
+///////////////////////////////////////////////////////////////////////////////
+// Helper functions
+
 // Most of this is taken from do_sys_truncate is fs/open.c
 static int truncate_fom_file(struct file *f, unsigned long len) {
 	struct inode *inode;
@@ -51,11 +131,80 @@ static int truncate_fom_file(struct file *f, unsigned long len) {
 	return error;
 }
 
-struct file *create_new_fom_file(unsigned long len, unsigned long prot) {
+static void delete_fom_file(struct file *f) {
+	struct vfsmount *mnt;
+	struct dentry *dentry;
+	struct dentry *parent;
+	int error;
+
+	filp_close(f, current->files);
+
+	mnt = f->f_path.mnt;
+	dentry = f->f_path.dentry;
+	parent = dentry->d_parent;
+
+	error = mnt_want_write(mnt);
+	if (error) {
+		pr_err("delete_fom_file: Can't delete file\n");
+		return;
+	}
+
+	inode_lock_nested(parent->d_inode, I_MUTEX_PARENT);
+
+	error = security_path_unlink(&f->f_path, dentry);
+	if (error)
+		goto err;
+
+	vfs_unlink(mnt_user_ns(mnt), parent->d_inode, dentry, NULL);
+
+err:
+	inode_unlock(parent->d_inode);
+	mnt_drop_write(mnt);
+}
+
+///////////////////////////////////////////////////////////////////////////////
+// External API functions
+
+bool use_file_only_mem(pid_t pid) {
+	if (fom_state == FOM_OFF) {
+		return false;
+	} if (fom_state == FOM_SINGLE_PROC) {
+		return pid == cur_proc;
+	} else if (fom_state == FOM_ALL) {
+		return true;
+	}
+
+	// Should never reach here
+	return false;
+}
+
+struct file *create_new_fom_file(unsigned long start, unsigned long len,
+		unsigned long prot, pid_t pid)
+{
+	struct fom_proc *proc;
+	struct fom_mapping *mapping = NULL;
 	struct file *f;
 	int open_flags = O_EXCL | O_TMPFILE;
-	umode_t open_mode = 0;
 	int ret = 0;
+	umode_t open_mode = 0;
+	bool new_proc = false;
+
+	down_read(&fom_procs_sem);
+	proc = get_fom_proc(pid);
+	up_read(&fom_procs_sem);
+	// Create the proc data structure if it does not already exist
+	if (!proc) {
+		new_proc = true;
+
+		proc = vmalloc(sizeof(struct fom_proc));
+		if (!proc) {
+			pr_err("create_new_fom_file: not enough memory for proc\n");
+			return NULL;
+		}
+
+		proc->pid = pid;
+		proc->mappings = RB_ROOT;
+	}
 
 	// Determine what flags to use for the call to open
 	if (prot & PROT_EXEC)
@@ -69,21 +218,78 @@ struct file *create_new_fom_file(unsigned long len, unsigned long prot) {
 		open_mode |= S_IWUSR;
 	} else if (prot & PROT_READ) {
 		// It doesn't make sense for anon memory to be read only,
-		return NULL;
+		goto err;
 	}
 
 	f = filp_open(file_dir, open_flags, open_mode);
 	if (IS_ERR(f))
-		return NULL;
+		goto err;
 
 	// Set the file to the correct size
 	ret = truncate_fom_file(f, len);
 	if (ret) {
-		filp_close(f, current->files);
-		return NULL;
+		delete_fom_file(f);
+		goto err;
+	}
+
+	// Create the new mapping
+	mapping = vmalloc(sizeof(struct fom_mapping));
+	if (!mapping) {
+		pr_err("create_new_fom_file: not enough memory for mapping\n");
+		goto err;
 	}
+	mapping->start = start;
+	mapping->end = start + len;
+	mapping->file = f;
+
+	down_write(&fom_procs_sem);
+	insert_new_mapping(proc, mapping);
+
+	// If we created a new fom_proc, add it to the rb_tree
+	if (new_proc)
+		insert_new_proc(proc);
+	up_write(&fom_procs_sem);
 
 	return f;
+
+err:
+	if (new_proc)
+		vfree(proc);
+	return NULL;
+}
+
+void fom_check_exiting_proc(pid_t pid) {
+	struct fom_proc *proc;
+	struct rb_node *node;
+
+	down_read(&fom_procs_sem);
+	proc = get_fom_proc(pid);
+	up_read(&fom_procs_sem);
+
+	if (!proc)
+		return;
+
+	down_write(&fom_procs_sem);
+
+	// First, free the mappings tree
+	node = proc->mappings.rb_node;
+	while (node) {
+		struct fom_mapping *map = rb_entry(node, struct fom_mapping, node);
+		rb_erase(node, &proc->mappings);
+		node = proc->mappings.rb_node;
+
+		delete_fom_file(map->file);
+
+		vfree(map);
+	}
+
+	// Now, remove the proc from the procs tree and free it
+	// TODO: I might be able to remove the proc from the proc tree first,
+	// then free everything else without holding any locks...
+	rb_erase(&proc->node, &fom_procs);
+	vfree(proc);
+
+	up_write(&fom_procs_sem);
 }
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -120,7 +326,7 @@ __ATTR(state, 0644, fom_state_show, fom_state_store);
 static ssize_t fom_pid_show(struct kobject *kobj,
 		struct kobj_attribute *attr, char *buf)
 {
-	return sprintf(buf, "%d\n", fom_proc);
+	return sprintf(buf, "%d\n", cur_proc);
 }
 
 static ssize_t fom_pid_store(struct kobject *kobj,
@@ -133,11 +339,11 @@ static ssize_t fom_pid_store(struct kobject *kobj,
 	ret = kstrtoint(buf, 0, &pid);
 
 	if (ret != 0) {
-		fom_proc = 0;
+		cur_proc = 0;
 		return ret;
 	}
 
-	fom_proc = pid;
+	cur_proc = pid;
 
 	return count;
 }
diff --git a/mm/mmap.c b/mm/mmap.c
index 82fc47b84c66..5d1d4386c9e6 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1282,19 +1282,6 @@ unsigned long do_mmap(struct file *file, unsigned long addr,
 	if (mm->map_count > sysctl_max_map_count)
 		return -ENOMEM;
 
-	// See if we want to use file only memory
-	if (!file && (flags & MAP_ANONYMOUS) && use_file_only_mem(current->tgid)) {
-		file = create_new_fom_file(len, prot);
-		flags = flags & ~MAP_ANONYMOUS;
-
-		// If the caller used MAP_PRIVATE, switch it to MAP_SHARED so that
-		// the system doesn't save the writes to anonymous memory
-		if (flags & MAP_PRIVATE) {
-			flags = flags & ~MAP_PRIVATE;
-			flags = flags | MAP_SHARED;
-		}
-	}
-
 	/* Obtain the address to map to. we verify (or select) it and ensure
 	 * that it represents a valid section of the address space.
 	 */
@@ -1327,6 +1314,22 @@ unsigned long do_mmap(struct file *file, unsigned long addr,
 	if (mlock_future_check(mm, vm_flags, len))
 		return -EAGAIN;
 
+	// See if we want to use file only memory
+	if (!file && (flags & MAP_ANONYMOUS) && use_file_only_mem(current->tgid)) {
+		file = create_new_fom_file(addr, len, prot, current->tgid);
+
+		if (file) {
+			flags = flags & ~MAP_ANONYMOUS;
+
+			// If the caller used MAP_PRIVATE, switch it to MAP_SHARED so that
+			// the system doesn't save the writes to anonymous memory
+			if (flags & MAP_PRIVATE) {
+				flags = flags & ~MAP_PRIVATE;
+				flags = flags | MAP_SHARED;
+			}
+		}
+	}
+
 	if (file) {
 		struct inode *inode = file_inode(file);
 		unsigned long flags_mask;
-- 
2.49.0

