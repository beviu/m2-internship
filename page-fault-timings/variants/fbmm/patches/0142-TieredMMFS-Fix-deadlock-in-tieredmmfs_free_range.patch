From c9ed627efe1fce403739bdea7b1291a2c06ebd68 Mon Sep 17 00:00:00 2001
From: BIJAN TABATABAI <btabatabai@wisc.edu>
Date: Tue, 26 Dec 2023 11:24:29 -0600
Subject: [PATCH 142/179] TieredMMFS: Fix deadlock in tieredmmfs_free_range

---
 TieredMMFS/fs.c | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/TieredMMFS/fs.c b/TieredMMFS/fs.c
index 4f2a28c7eae9..97efd7f50055 100644
--- a/TieredMMFS/fs.c
+++ b/TieredMMFS/fs.c
@@ -204,16 +204,18 @@ static long tieredmmfs_free_range(struct inode *inode, loff_t offset, loff_t len
     struct tieredmmfs_sb_info *sbi = FTFS_SB(inode->i_sb);
     struct tieredmmfs_inode_info *inode_info = FTFS_I(inode);
     struct rb_node *node, *next_node;
-    struct tieredmmfs_page *page;
+    struct tieredmmfs_page *page = NULL;
+    u64 cur_offset = offset;
     u64 page_offset = offset >> sbi->page_shift;
     u64 num_pages = len >> sbi->page_shift;
 
     write_lock(&inode_info->map_lock);
-    // TODO: Change this to instead of needing the page at the offset,
-    // just find the first mapping with an offset >= the requested offset.
-    page = tieredmmfs_find_page(&inode_info->page_maps, offset);
+    while (!page && cur_offset < offset + len) {
+        page = tieredmmfs_find_page(&inode_info->page_maps, cur_offset);
+        cur_offset += sbi->page_size;
+    }
     if (!page) {
-        return 0;
+        goto unlock;
     }
     node = &page->node;
 
@@ -237,6 +239,7 @@ static long tieredmmfs_free_range(struct inode *inode, loff_t offset, loff_t len
         page = container_of(node, struct tieredmmfs_page, node);
     }
 
+unlock:
     write_unlock(&inode_info->map_lock);
 
     return 0;
-- 
2.49.0

