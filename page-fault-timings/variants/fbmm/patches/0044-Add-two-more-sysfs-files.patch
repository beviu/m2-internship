From b227ba5c742e0602af223a682177f85189b9e4ec Mon Sep 17 00:00:00 2001
From: Bijan Tabatabai <bijan311@gmail.com>
Date: Tue, 26 Apr 2022 13:27:15 -0500
Subject: [PATCH 044/179] Add two more sysfs files

1) Controls whether or not track_pfn_insert is called
2) controls whether of not mark_inode_dirty is called
---
 fs/ext4/inode.c    |  3 ++-
 mm/file_only_mem.c | 64 ++++++++++++++++++++++++++++++++++++++++++++++
 mm/memory.c        |  5 +++-
 3 files changed, 70 insertions(+), 2 deletions(-)

diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index da8f309693ab..9d642de9ec36 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -6071,6 +6071,7 @@ int ext4_expand_extra_isize(struct inode *inode,
  * Whenever the user wants stuff synced (sys_sync, sys_msync, sys_fsync)
  * we start and wait on commits.
  */
+extern int fom_mark_inode_dirty;
 int __ext4_mark_inode_dirty(handle_t *handle, struct inode *inode,
 				const char *func, unsigned int line)
 {
@@ -6078,7 +6079,7 @@ int __ext4_mark_inode_dirty(handle_t *handle, struct inode *inode,
 	struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
 	int err;
 
-	if (ext4_should_enable_dax(inode)) {
+	if (ext4_should_enable_dax(inode) && !fom_mark_inode_dirty) {
 		return 0;
 	}
 
diff --git a/mm/file_only_mem.c b/mm/file_only_mem.c
index 7897fe80a79c..8464869c69e6 100644
--- a/mm/file_only_mem.c
+++ b/mm/file_only_mem.c
@@ -712,6 +712,68 @@ static ssize_t fom_pmem_write_zeroes_store(struct kobject *kobj,
 static struct kobj_attribute fom_pmem_write_zeroes_attribute =
 __ATTR(pmem_write_zeroes, 0644, fom_pmem_write_zeroes_show, fom_pmem_write_zeroes_store);
 
+int fom_track_pfn_insert = 0;
+static ssize_t fom_track_pfn_insert_show(struct kobject *kobj,
+		struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", fom_track_pfn_insert);
+}
+
+static ssize_t fom_track_pfn_insert_store(struct kobject *kobj,
+		struct kobj_attribute *attr,
+		const char *buf, size_t count)
+{
+	int val;
+	int ret;
+
+	ret = kstrtoint(buf, 0, &val);
+
+	if (ret != 0) {
+		fom_track_pfn_insert = 0;
+		return ret;
+	}
+
+	if (val == 0)
+		fom_track_pfn_insert = 0;
+	else
+		fom_track_pfn_insert = 1;
+
+	return count;
+}
+static struct kobj_attribute fom_track_pfn_insert_attribute =
+__ATTR(track_pfn_insert, 0644, fom_track_pfn_insert_show, fom_track_pfn_insert_store);
+
+int fom_mark_inode_dirty = 0;
+static ssize_t fom_mark_inode_dirty_show(struct kobject *kobj,
+		struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", fom_mark_inode_dirty);
+}
+
+static ssize_t fom_mark_inode_dirty_store(struct kobject *kobj,
+		struct kobj_attribute *attr,
+		const char *buf, size_t count)
+{
+	int val;
+	int ret;
+
+	ret = kstrtoint(buf, 0, &val);
+
+	if (ret != 0) {
+		fom_mark_inode_dirty = 0;
+		return ret;
+	}
+
+	if (val == 0)
+		fom_mark_inode_dirty = 0;
+	else
+		fom_mark_inode_dirty = 1;
+
+	return count;
+}
+static struct kobj_attribute fom_mark_inode_dirty_attribute =
+__ATTR(mark_inode_dirty, 0644, fom_mark_inode_dirty_show, fom_mark_inode_dirty_store);
+
 static struct attribute *file_only_mem_attr[] = {
 	&fom_state_attribute.attr,
 	&fom_pid_attribute.attr,
@@ -721,6 +783,8 @@ static struct attribute *file_only_mem_attr[] = {
 	&nt_huge_page_zero_attribute.attr,
 	&fom_follow_page_mask_fix_attribute.attr,
 	&fom_pmem_write_zeroes_attribute.attr,
+	&fom_track_pfn_insert_attribute.attr,
+	&fom_mark_inode_dirty_attribute.attr,
 	NULL,
 };
 
diff --git a/mm/memory.c b/mm/memory.c
index 7806e690963a..9c16851a2c86 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -2235,6 +2235,7 @@ static bool vm_mixed_ok(struct vm_area_struct *vma, pfn_t pfn)
 	return false;
 }
 
+extern int fom_track_pfn_insert;
 static vm_fault_t __vm_insert_mixed(struct vm_area_struct *vma,
 		unsigned long addr, pfn_t pfn, pgprot_t pgprot,
 		bool mkwrite)
@@ -2246,7 +2247,9 @@ static vm_fault_t __vm_insert_mixed(struct vm_area_struct *vma,
 	if (addr < vma->vm_start || addr >= vma->vm_end)
 		return VM_FAULT_SIGBUS;
 
-//	track_pfn_insert(vma, &pgprot, pfn);
+	if (fom_track_pfn_insert) {
+		track_pfn_insert(vma, &pgprot, pfn);
+	}
 
 	if (!pfn_modify_allowed(pfn_t_to_pfn(pfn), pgprot))
 		return VM_FAULT_SIGBUS;
-- 
2.49.0

