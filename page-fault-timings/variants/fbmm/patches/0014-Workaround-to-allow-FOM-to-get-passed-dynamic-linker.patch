From dc4ea7c0a322f82c4ce91db26b6d2bcc32e4595b Mon Sep 17 00:00:00 2001
From: Bijan Tabatabai <bijan311@gmail.com>
Date: Tue, 19 Oct 2021 14:31:52 -0500
Subject: [PATCH 014/179] Workaround to allow FOM to get passed dynamic linker

Some code in the dynamic linker is causing a Bus Error when it
is run with FOM enabled. This commit waits until the linker in done
before enabling fom
---
 mm/file_only_mem.c | 10 ++++++++++
 mm/mmap.c          |  9 +++++++--
 2 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/mm/file_only_mem.c b/mm/file_only_mem.c
index 75405a292325..663aff984533 100644
--- a/mm/file_only_mem.c
+++ b/mm/file_only_mem.c
@@ -40,6 +40,7 @@ struct fom_proc {
 
 static enum file_only_mem_state fom_state = FOM_OFF;
 static pid_t cur_proc = 0;
+static int fom_count = 0;
 static char file_dir[PATH_MAX];
 static struct rb_root fom_procs = RB_ROOT;
 static DECLARE_RWSEM(fom_procs_sem);
@@ -193,6 +194,7 @@ static void delete_fom_file(struct file *f) {
 }
 
 static void drop_fom_file(struct fom_mapping *map) {
+//	pr_err("count: %d %llx %llx\n", map->file->count, map->start, map->end);
 	map->file->count--;
 	if (map->file->count <= 0) {
 		delete_fom_file(map->file->f);
@@ -260,6 +262,11 @@ struct file *fom_create_new_file(unsigned long start, unsigned long len,
 	struct fom_file *file = NULL;
 	bool new_proc = false;
 
+	// Workaround for this causing a crash in the dynamic linker
+	fom_count++;
+	if (fom_count <= 2)
+		return NULL;
+
 	down_read(&fom_procs_sem);
 	proc = get_fom_proc(pid);
 	up_read(&fom_procs_sem);
@@ -298,6 +305,7 @@ struct file *fom_create_new_file(unsigned long start, unsigned long len,
 	mapping->file = file;
 
 	down_write(&fom_procs_sem);
+
 	insert_new_mapping(proc, mapping);
 
 	// If we created a new fom_proc, add it to the rb_tree
@@ -448,6 +456,8 @@ void fom_check_exiting_proc(pid_t pid) {
 	if (!proc)
 		return;
 
+	fom_count = 0;
+
 	down_write(&fom_procs_sem);
 
 	// First, free the mappings tree
diff --git a/mm/mmap.c b/mm/mmap.c
index b122806808d2..5f16771984fc 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1315,6 +1315,9 @@ unsigned long do_mmap(struct file *file, unsigned long addr,
 		return -EAGAIN;
 
 	// See if we want to use file only memory
+//	if (use_file_only_mem(current->tgid)) {
+//		pr_err("%lx %lx %lx %p\n", addr, addr + len, flags & MAP_ANONYMOUS, file);
+//	}
 	if (!file && (flags & MAP_ANONYMOUS) && use_file_only_mem(current->tgid)) {
 		file = fom_create_new_file(addr, len, prot, current->tgid);
 
@@ -2337,6 +2340,9 @@ static inline int munmap_sidetree(struct vm_area_struct *vma,
 
 	if (vma->vm_flags & VM_LOCKED)
 		vma->vm_mm->locked_vm -= vma_pages(vma);
+//	if (use_file_only_mem(current->tgid)) {
+//		pr_err("a %lx %lx\n", start, end);
+//	}
 
 	return 0;
 }
@@ -2502,6 +2508,7 @@ do_mas_align_munmap(struct ma_state *mas, struct vm_area_struct *vma,
 	remove_mt(mm, &mas_detach);
 	__mt_destroy(&mt_detach);
 
+	fom_munmap(current->tgid, start, end - start);
 
 	validate_mm(mm);
 	return downgrade ? 1 : 0;
@@ -2546,8 +2553,6 @@ int do_mas_munmap(struct ma_state *mas, struct mm_struct *mm,
 	if (end == start)
 		return -EINVAL;
 
-	fom_munmap(current->tgid, start, len);
-
 	 /* arch_unmap() might do unmaps itself.  */
 	arch_unmap(mm, start, end);
 
-- 
2.49.0

