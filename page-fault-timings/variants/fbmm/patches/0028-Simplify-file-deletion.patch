From aa09af1eb49012ef06468413b8eedf6e241f9be3 Mon Sep 17 00:00:00 2001
From: Bijan Tabatabai <bijan311@gmail.com>
Date: Fri, 28 Jan 2022 15:47:36 -0600
Subject: [PATCH 028/179] Simplify file deletion

Turns out with O_TMPFILE we don't have to explicitly delete a file...
We might not even have to close it, but it seems good practice to do that.
---
 mm/file_only_mem.c | 36 ++----------------------------------
 1 file changed, 2 insertions(+), 34 deletions(-)

diff --git a/mm/file_only_mem.c b/mm/file_only_mem.c
index e3fafbe339af..c3378a74c2ff 100644
--- a/mm/file_only_mem.c
+++ b/mm/file_only_mem.c
@@ -170,42 +170,10 @@ static int truncate_fom_file(struct file *f, unsigned long len) {
 	return error;
 }
 
-// Most of this is taken from do_unlinkat in fs/namei.c
-static void delete_fom_file(struct file *f) {
-	struct vfsmount *mnt;
-	struct dentry *dentry;
-	struct dentry *parent;
-	int error;
-
-	filp_close(f, current->files);
-
-	mnt = f->f_path.mnt;
-	dentry = f->f_path.dentry;
-	parent = dentry->d_parent;
-
-	error = mnt_want_write(mnt);
-	if (error) {
-		pr_err("delete_fom_file: Can't delete file\n");
-		return;
-	}
-
-	inode_lock_nested(parent->d_inode, I_MUTEX_PARENT);
-
-	error = security_path_unlink(&f->f_path, dentry);
-	if (error)
-		goto err;
-
-	vfs_unlink(mnt_user_ns(mnt), parent->d_inode, dentry, NULL);
-
-err:
-	inode_unlock(parent->d_inode);
-	mnt_drop_write(mnt);
-}
-
 static void drop_fom_file(struct fom_mapping *map) {
 	map->file->count--;
 	if (map->file->count <= 0) {
-		delete_fom_file(map->file->f);
+		filp_close(map->file->f, current->files);
 		fput(map->file->f);
 		vfree(map->file);
 		map->file = NULL;
@@ -257,7 +225,7 @@ struct file *fom_create_new_file(unsigned long len, unsigned long prot) {
 	// Set the file to the correct size
 	ret = truncate_fom_file(f, len);
 	if (ret) {
-		delete_fom_file(f);
+		filp_close(f, current->files);
 		return NULL;
 	}
 
-- 
2.49.0

