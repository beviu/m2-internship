From 0da3b0f9f4694b7768ed22bd755ef1c44fc3e69c Mon Sep 17 00:00:00 2001
From: Bijan Tabatabai <bijan311@gmail.com>
Date: Thu, 27 Oct 2022 13:35:09 -0500
Subject: [PATCH 072/179] Have FOMTierFS fallocate map the PTE as well.

This required us to move truncating a created FOM file from the
fom_create_new_file to fom_register_file
---
 FOMTierFS/fs.c                | 33 ++++++++++++++++++++++++++++++++-
 include/linux/file_only_mem.h |  4 ++--
 mm/file_only_mem.c            | 17 ++++++++---------
 mm/mmap.c                     |  4 ++--
 4 files changed, 44 insertions(+), 14 deletions(-)

diff --git a/FOMTierFS/fs.c b/FOMTierFS/fs.c
index f8618645525c..7f79d86deddb 100644
--- a/FOMTierFS/fs.c
+++ b/FOMTierFS/fs.c
@@ -185,7 +185,7 @@ static pte_t *fomtierfs_find_pte(struct vm_area_struct *vma, u64 address)
         return NULL;
 
     pte = pte_offset_kernel(pmd, address);
-    if (!pte || !pte_present(*pte))
+    if (!pte)
         return NULL;
 
     return pte;
@@ -635,7 +635,13 @@ static long fomtierfs_fallocate(struct file *file, int mode, loff_t offset, loff
     struct inode *inode = file_inode(file);
     struct fomtierfs_sb_info *sbi = FTFS_SB(inode->i_sb);
     struct fomtierfs_inode_info *inode_info = FTFS_I(inode);
+    struct address_space *as = inode->i_mapping;
+    struct vm_area_struct *vma;
     struct fomtierfs_page *page;
+    u64 virt_addr;
+    u64 pfn;
+    pte_t *ptep;
+    pte_t pte;
     loff_t off;
 
     if (mode & FALLOC_FL_PUNCH_HOLE) {
@@ -646,17 +652,42 @@ static long fomtierfs_fallocate(struct file *file, int mode, loff_t offset, loff
 
     // Allocate and add mappings for the desired range
     for (off = offset; off < offset + len; off += PAGE_SIZE) {
+        // Get the page
         page = fomtierfs_alloc_page(inode, sbi, off >> PAGE_SHIFT);
         if (!page) {
             return -ENOMEM;
         }
 
+        // Update the metadata to reflect the new mapping
         write_lock(&inode_info->map_lock);
         if (!fomtierfs_insert_page(&inode_info->page_maps, page)) {
             BUG();
         }
         write_unlock(&inode_info->map_lock);
+
+        // Set the page table for this page
+        spin_lock(&page->lock);
+        i_mmap_lock_read(as);
+
+        vma = vma_interval_tree_iter_first(&as->i_mmap, offset, offset + len);
+        virt_addr = vma->vm_start + (off - (vma->vm_pgoff << PAGE_SHIFT));
+        ptep = fomtierfs_find_pte(vma, virt_addr);
+        if (!ptep)
+            goto unlock;
+
+        pfn = sbi->mem[page->type].pfn.val + page->page_num;
+        pte = pfn_pte(pfn, vma->vm_page_prot);
+        pte = pte_mkdevmap(pte);
+        if (vma->vm_flags & VM_WRITE)
+            pte = pte_mkwrite(pte);
+        set_pte_at(vma->vm_mm, virt_addr, ptep, pte);
+
+unlock:
+        i_mmap_unlock_read(as);
+        spin_unlock(&page->lock);
+
     }
+    __flush_tlb_all();
 
     return 0;
 }
diff --git a/include/linux/file_only_mem.h b/include/linux/file_only_mem.h
index 3732d186f729..fd0da6f7d807 100644
--- a/include/linux/file_only_mem.h
+++ b/include/linux/file_only_mem.h
@@ -10,7 +10,7 @@ bool use_file_only_mem(pid_t pid);
 
 struct file *fom_create_new_file(unsigned long len,	unsigned long prot, int flags);
 void fom_register_file(pid_t pid, struct file *f, unsigned long start,
-		unsigned long len);
+		unsigned long len, int flags);
 int fom_munmap(pid_t pid, unsigned long start, unsigned long len);
 void fom_check_exiting_proc(pid_t pid);
 
@@ -25,7 +25,7 @@ inline struct file *fom_create_new_file(unsigned long len, unsigned long prot, i
 }
 
 inline void fom_register_file(pid_t pid, struct file *f, unsigned long start,
-		unsigned long len)
+		unsigned long len, int flags)
 {}
 
 inline int fom_munmap(pid_t pid, unsigned long start, unsigned long len) {
diff --git a/mm/file_only_mem.c b/mm/file_only_mem.c
index f8e53a9c4b9e..a3e354937b4b 100644
--- a/mm/file_only_mem.c
+++ b/mm/file_only_mem.c
@@ -208,7 +208,6 @@ struct file *fom_create_new_file(unsigned long len, unsigned long prot, int flag
 	struct file *f;
 	int open_flags = O_EXCL | O_TMPFILE;
 	umode_t open_mode = 0;
-	int ret = 0;
 	ktime_t start_time = ktime_get_ns();
 
 	// Determine what flags to use for the call to open
@@ -230,13 +229,6 @@ struct file *fom_create_new_file(unsigned long len, unsigned long prot, int flag
 	if (IS_ERR(f))
 		return NULL;
 
-	// Set the file to the correct size
-	ret = truncate_fom_file(f, len, flags);
-	if (ret) {
-		filp_close(f, current->files);
-		return NULL;
-	}
-
 	file_create_time += ktime_get_ns() - start_time;
 	num_file_creates++;
 
@@ -244,12 +236,13 @@ struct file *fom_create_new_file(unsigned long len, unsigned long prot, int flag
 }
 
 void fom_register_file(pid_t pid, struct file *f,
-		unsigned long start, unsigned long len)
+		unsigned long start, unsigned long len, int flags)
 {
 	struct fom_proc *proc;
 	struct fom_mapping *mapping = NULL;
 	struct fom_file *file = NULL;
 	bool new_proc = false;
+	int ret;
 	ktime_t start_time = ktime_get_ns();
 
 	down_read(&fom_procs_sem);
@@ -298,6 +291,12 @@ void fom_register_file(pid_t pid, struct file *f,
 		insert_new_proc(proc);
 	up_write(&fom_procs_sem);
 
+	// Set the file to the correct size
+	ret = truncate_fom_file(f, len, flags);
+	if (ret) {
+		pr_err("Could not truncate FOM file!\n");
+	}
+
 	file_register_time += ktime_get_ns() - start_time;
 	num_file_registers++;
 
diff --git a/mm/mmap.c b/mm/mmap.c
index 89e7c529e7c6..71c558acde88 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -267,7 +267,7 @@ SYSCALL_DEFINE1(brk, unsigned long, brk)
 		vm_flags = VM_DATA_DEFAULT_FLAGS | VM_ACCOUNT | mm->def_flags
 			| VM_SHARED | VM_MAYSHARE;
 		mmap_region(f, oldbrk, newbrk-oldbrk, vm_flags, 0, NULL);
-		fom_register_file(current->tgid, f, oldbrk, newbrk-oldbrk);
+		fom_register_file(current->tgid, f, oldbrk, newbrk-oldbrk, 0);
 	} else {
 		brkvma = mas_prev(&mas, mm->start_brk);
 		if (do_brk_flags(&mas, brkvma, oldbrk, newbrk-oldbrk, 0) < 0)
@@ -1448,7 +1448,7 @@ unsigned long do_mmap(struct file *file, unsigned long addr,
 	// This is to prevent a fom file from being registered and then an overlapping
 	// region is unmapped, making the fom system think it needs to delete the new file
 	if (created_fom_file) {
-		fom_register_file(current->tgid, file, addr, len);
+		fom_register_file(current->tgid, file, addr, len, flags);
 	}
 	return addr;
 }
-- 
2.49.0

